name: Build and test - node-modules-caching

# Run this workflow every time a new commit pushed to any branch
on:
  push:
    # Enable these when finished
    # paths:
    #   - 'node-modules-caching/**'

defaults:
  run:
    working-directory: 'node-modules-caching'

env:
  PACKAGE_LOCK_HASH: 'null'
  NMC_ARTIFACT_EXISTS: 'no'
  NMC_ARTIFACT_NAME: 'null'

jobs:
  # This job installs NPM dependencies and caches them as a build artifact
  npm-install-and-cache:
    name: 'Install dependencies and cache node_modules'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 'Setup Node'
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: 'node-modules-caching/package-lock.json'

      - name: 'Hash package-lock.json'
        run: echo "PACKAGE_LOCK_HASH=${{ hashFiles('node-modules-caching/package-lock.json') }}" >> $GITHUB_ENV

      - name: 'Set artifact name'
        run: echo "NMC_ARTIFACT_NAME=node-modules-cache-${{ env.PACKAGE_LOCK_HASH }}" >> $GITHUB_ENV

      - name: 'Debug environment'
        run: |
          echo "PACKAGE_LOCK_HASH: $PACKAGE_LOCK_HASH"
          echo "NMC_ARTIFACT_EXISTS: $NMC_ARTIFACT_EXISTS"
          echo "NMC_ARTIFACT_NAME: $NMC_ARTIFACT_NAME"

      - name: 'Restore node_modules cache'
        id: 'restore'
        uses: actions/download-artifact@v2
        continue-on-error: true
        with:
          name: ${{ env.NMC_ARTIFACT_NAME }}
          path: node-modules-caching

      - name: 'Does a cached node_modules exist?'
        if: ${{ steps.restore.outcome == 'success' }}
        run: echo "NMC_ARTIFACT_EXISTS=yes" >> $GITHUB_ENV

      - name: 'Install deps if no node_modules cache exists'
        if: ${{ env.NMC_ARTIFACT_EXISTS == 'no' }}
        run: npm ci

      - name: 'Tar node_modules'
        if: ${{ env.NMC_ARTIFACT_EXISTS == 'no' }}
        run: tar cvf node_modules.tar node_modules

      - name: 'Compress node_modules tar'
        if: ${{ env.NMC_ARTIFACT_EXISTS == 'no' }}
        run: bzip2 -9 node_modules.tar

      - name: 'Cache node_modules as Artifact'
        if: ${{ env.NMC_ARTIFACT_EXISTS == 'no' }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.NMC_ARTIFACT_NAME }}
          path: node-modules-caching/node_modules.tar.bz2
          if-no-files-found: error
          retention-days: 1

  # A demo job depending on node_modules
  capitalize1:
    name: capitalize1
    needs: npm-install-and-cache

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: 'Setup Node'
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: 'node-modules-caching/package-lock.json'

      - name: 'Debug environment'
        run: |
          echo "PACKAGE_LOCK_HASH: $PACKAGE_LOCK_HASH"
          echo "NMC_ARTIFACT_EXISTS: $NMC_ARTIFACT_EXISTS"
          echo "NMC_ARTIFACT_NAME: $NMC_ARTIFACT_NAME"

      - name: 'Restore node_modules cache'
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.NMC_ARTIFACT_NAME }}
          path: node-modules-caching

      - name: 'Uncompress node_modules tar'
        run: bunzip2 -v node_modules.tar.bz2

      - name: 'Untar node_modules'
        run: tar xvf node_modules.tar

      - name: Run capitalize
        run: npm run capitalize

  # A demo job depending on node_modules
  # capitalize2:
  #   name: capitalize2
  #   needs: npm-install-and-cache

  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: 'Setup Node'
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'
  #         cache: 'npm'
  #         cache-dependency-path: 'node-modules-caching/package-lock.json'

  #     - name: 'Restore node_modules cache'
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: node-modules-cache-${{ github.run_id }}
  #         path: node-modules-caching

  #     - name: 'Uncompress node_modules tar'
  #       run: bunzip2 node_modules.tar.bz2

  #     - name: 'Untar node_modules'
  #       run: tar xvf node_modules.tar

  #     - name: Run capitalize
  #       run: npm run capitalize
